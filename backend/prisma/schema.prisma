generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String

  // Admin creates classes, teachers, and students
  createdClasses  Class[]
  createdTeachers Teacher[]
  createdStudents Student[]
  library        Library[]
  announcements  Announcement[]
}

model Teacher {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String

  createdById String?
  createdBy   Admin?   @relation(fields: [createdById], references: [id])

  // Relations
  subjectsTaught TeacherSubjectClass[]
  attendanceSessions AttendanceSession[]
  notes Note[]
  assignments Assignment[]
}

model Student {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  rollno    Int

  createdById String?
  createdBy   Admin?   @relation(fields: [createdById], references: [id])

  // Relations
  enrollments Enrollment[]
  attendanceRecords AttendanceRecord[]
  submissions Submission[]
}

model Class {
  id        String   @id @default(cuid())
  name      String
  section   String?

  createdById String?
  createdBy   Admin? @relation(fields: [createdById], references: [id])

  // Relations
  subjects           Subject[]
  students           Enrollment[]
  teacherAssignments TeacherSubjectClass[]
  attendanceSessions AttendanceSession[]
}


model Subject {
  id        String   @id @default(cuid())
  name      String
  classId   String
  class     Class     @relation(fields: [classId], references: [id])

  // Relations
  teachers  TeacherSubjectClass[]
  students  Enrollment[]
  attendanceSessions AttendanceSession[]
  notes Note[]
  assignments Assignment[]
}

enum AnnouncementType {
  GLOBAL
  CLASS
  TEACHER
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  message    String
  type       AnnouncementType
  classId    String?
  teacherId  String?
  createdBy  Admin    @relation(fields: [createdById], references: [id])
  createdById String
  createdAt  DateTime @default(now())
}

model Library {
  id         String   @id @default(cuid())
  title      String
  url        String
  uploadedBy Admin    @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt  DateTime @default(now())
}

model TeacherSubjectClass {
  id         String   @id @default(cuid())
  teacherId  String
  subjectId  String
  classId    String

  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
  class      Class    @relation(fields: [classId], references: [id])

  @@unique([teacherId, subjectId, classId])
}

model Enrollment {
  id         String   @id @default(cuid())
  studentId  String
  subjectId  String
  classId    String

  student    Student  @relation(fields: [studentId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
  class      Class    @relation(fields: [classId], references: [id])

  @@unique([studentId, subjectId, classId])
}

model AttendanceSession {
  id         String   @id @default(cuid())
  subjectId  String
  classId    String
  teacherId  String
  date       DateTime
  startTime  String
  endTime    String
  topic      String

  subject    Subject  @relation(fields: [subjectId], references: [id])
  class      Class    @relation(fields: [classId], references: [id])
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  records    AttendanceRecord[]
}

model AttendanceRecord {
  id         String   @id @default(cuid())
  sessionId  String
  studentId  String
  present    Boolean

  session    AttendanceSession @relation(fields: [sessionId], references: [id])
  student    Student           @relation(fields: [studentId], references: [id])

  @@unique([sessionId, studentId])
}

model Note {
  id        String   @id @default(cuid())
  teacherId String
  subjectId String
  topic     String
  pdfUrl    String
  createdAt DateTime @default(now())

  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

enum SubmissionStatus {
  UPLOAD
  SUBMITTED
  ACCEPTED
}

model Assignment {
  id          String   @id @default(cuid())
  teacherId   String
  subjectId   String
  title       String
  description String
  marks       Int
  deadline    DateTime
  pdfUrl      String?
  createdAt   DateTime @default(now())

  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  submissions Submission[]
}

model Submission {
  id            String   @id @default(cuid())
  assignmentId  String
  studentId     String
  fileUrl       String
  status        SubmissionStatus @default(UPLOAD)
  submittedAt   DateTime?
  acceptedAt    DateTime?
  marksAwarded  Int?

  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  student       Student    @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
}

 
